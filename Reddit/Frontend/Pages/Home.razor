@page "/"
@using System.Net
@using System.Text
@using Frontend.Service
@using Core
@using Cookie = Core.Cookie
@inject PostService Service
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav
@inject UserState UserState

<PageTitle>Redit</PageTitle>

@if (loaded)
{
    if (hasUsername)
    {
        <div class="homepage">
            @foreach (var post in _posts)
            {
                <hr/>
                <div class="postCard" @onclick="() => ShowThread(post.PostId)">
                    <span class="postTitle">@post.Title</span>
                    <span class="postText">@(post.Content != null ? post.Content.Length > maxContentLength ? post.Content.Substring(0, maxContentLength) + "..." : post.Content : post.URL)</span>
                </div>
            }
            @if (!noMorePosts)
            {
                <span class="showMore" @onclick="ShowMorePosts">Show more...</span>
            }
        </div>
    } else
    {
        <div>
            <h1>Choose your Author name for this session</h1>
            <div class="inputButton">
                <span>Author name</span>
                <InputText @bind-Value="@Username" @oninput="OnAuthorNameChange" style="margin-bottom: 25px; border: black solid 1px; border-radius: 10px; background-color: #efefef;"></InputText>
                <button @onclick="HandleAuthorName">Confirm</button>
            </div>
            <span style="color: red">@nameErrMes</span>
        </div>
    }
}


@code{
    bool loaded = false;
    Cookie? _cookie;
    string? Username;
    string? nameErrMes;
    bool hasUsername = false;

    const int maxNameLength = 15;
    const int maxContentLength = 150;

    int page = 0;
    List<Post> _posts = new List<Post>();
    bool noMorePosts = false;
    
    protected override async Task OnInitializedAsync()
    {
        _cookie = await LocalStorage.GetItemAsync<Cookie?>("Session");
        if (_cookie is not null)
        {
            if (DateTime.Now > _cookie.ExpirationDate)
            {
                await LocalStorage.ClearAsync();
            }
            else
            {
                Username = _cookie.AuthorName;
                UserState.Username = Username;
                hasUsername = true;
            }

        }

        await GetPosts();
        
        loaded = true;
        StateHasChanged();
    }

    private async Task GetPosts()
    {
        var response = await Service.GetPosts(page);
        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                var newPosts = await response.Content.ReadFromJsonAsync<List<Post>>();
                if (newPosts.Count < Globals._postsToLoad)
                    noMorePosts = true;
                _posts.AddRange(newPosts);
                break;
                
            case HttpStatusCode.NoContent:
                noMorePosts = true;
                break;
                
            default:
                Console.WriteLine("Response on get posts not an expected statuscode");
                break;
        }
    }
    
    private void ChangeName()
    {
        if (string.IsNullOrWhiteSpace(UserState.Username))
        {
            _cookie = null;
            hasUsername = false;
            Username = "";
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        UserState.OnChange += ChangeName;
    }

    public void Dispose()
    {
        UserState.OnChange -= ChangeName;
    }

    private async void HandleAuthorName()
    {
        if (string.IsNullOrWhiteSpace(Username))
        {
            nameErrMes = "Username is required";
        } else if (Username.Length > maxNameLength)
        {
            nameErrMes = $"Username max length is {maxNameLength} characters";
        }
        else
        {
            StringBuilder accName = new StringBuilder();
            
            for (int i = 0; i < Username.Length; i++)
            {
                if (Username[i] != ' ')
                    accName.Append(Username[i]);
            }
            
            Username = accName.ToString();
            
            // Du har dit login i 30 min, eller forevigt hvis du ikke skifter side
            _cookie = new Cookie()
            {
                AuthorName = Username,
                ExpirationDate = DateTime.Now.AddMinutes(30)
            };
            UserState.Username = Username;
            hasUsername = true;
            await LocalStorage.SetItemAsync("Session", _cookie);
        }
        StateHasChanged();
    }

    private void OnAuthorNameChange(ChangeEventArgs e)
    {
        nameErrMes = "";
        StateHasChanged();
    }

    private void ShowThread(long postPostId)
    {
        Nav.NavigateTo($"/PostPage/{postPostId}");
    }

    private async Task ShowMorePosts()
    {
        page++;
        await GetPosts();
        StateHasChanged();
    }

}